#!/usr/bin/env node
"use strict";var j=Object.create;var g=Object.defineProperty;var L=Object.getOwnPropertyDescriptor;var S=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,N=Object.prototype.hasOwnProperty;var x=(e,n,t,o)=>{if(n&&typeof n=="object"||typeof n=="function")for(let r of S(n))!N.call(e,r)&&r!==t&&g(e,r,{get:()=>n[r],enumerable:!(o=L(n,r))||o.enumerable});return e};var c=(e,n,t)=>(t=e!=null?j(w(e)):{},x(n||!e||!e.__esModule?g(t,"default",{value:e,enumerable:!0}):t,e));var $=require("@commander-js/extra-typings");var p="1.0.1";var u=c(require("fs")),f=c(require("path")),y=c(require("inquirer"));var m="\r",s=`
`,a=["YOUR_FIELD_VALUE"];var v=(e,n)=>{let[t,o]=e.split("=");return n===a[0]?`${t}="YOUR_${t.toUpperCase()}_VALUE"`:""},P=(e,n)=>{var t=[""];return e.includes(`${m}${s}`)?t=e.split(`${m}${s}`):t=e.split(`${s}`),t.map(o=>{if(o.trim()===""||o.startsWith("#"))return o;if(o.includes("#")){let[r,i]=o.split(/#+/);return`${v(r,n)}   #${i}`}return`${v(o,n)}`}).join(`${m}${s}`)},R=(e,n,t)=>{try{let o=f.default.join(process.cwd(),e!=null?e:".env");console.log(`reading sample env(${e})`);let r=u.default.readFileSync(o,{encoding:"utf8",flag:"r"});return P(r,t)}catch(o){return console.log("No .env file Found!"),!1}},T=(e,n)=>{let t=f.default.join(process.cwd(),n!=null?n:".env");try{u.default.writeFileSync(t,e,{encoding:"utf8",flag:"w"})}catch(o){console.log(`Couldnot write ${n} file.`)}},h=({name:e,sample:n,values:t,dryRun:o})=>{let r=R(e,n,t);r&&(o?console.log(r):T(r,n),!o&&console.log("Sample ENV file written successfully!"))},E=({name:e,sample:n,values:t,silent:o,dryRun:r})=>{o?h({name:e,sample:n,values:t,dryRun:r}):y.default.prompt([{type:"input",name:"name",message:"What is the name of your env file?",default:".env"},{type:"input",name:"sample",message:"What do you want your sample env file name to be?",default:".sample.env"},{type:"list",name:"values",message:"Placeholder format for your values?",choices:a},{type:"confirm",name:"dryRun",message:"Want the output in the console instead of generating a file?",default:!1}]).then(({name:i,sample:A,values:C,dryRun:_})=>{h({name:i,sample:A,values:C,dryRun:_})}).catch(i=>{i.isTtyError?(console.log("Couldnot render prompt under this environment!"),console.log(i)):console.log(`Something went Wrong: ${i}`)})};var U=require("figlet"),O=`
${U.textSync(`Helper v${p}`,{font:"Standard",horizontalLayout:"fitted",verticalLayout:"fitted"})}
A CLI tool for generating a sample env(.env.sample) file from a .env file.
By: Ajay Singh [@mentormaya] <admin@ajaysingh.com.np>
`,b=O;var l=new $.Command;l.name("helper").description(b).version(p);l.command("gen-env").description("Generate Sample ENV(.env.sample) from .env file.").option("-s, --silent","runs without any interaction.",!1).option("-n, --name <name>","Name of env file",".env").option("-N, --sample <sample_name>","Name for the sample env file",".env.sample").option("-v, --values <placeholder>","Default Placeholder Value",a[0]).option("-d, --dry-run","Output to the console only",!1).action(E);l.exitOverride();try{l.parse()}catch(e){l.helpInformation()}
