#!/usr/bin/env node
"use strict";var L=Object.create;var f=Object.defineProperty;var $=Object.getOwnPropertyDescriptor;var j=Object.getOwnPropertyNames;var S=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var N=(e,n,o,t)=>{if(n&&typeof n=="object"||typeof n=="function")for(let r of j(n))!w.call(e,r)&&r!==o&&f(e,r,{get:()=>n[r],enumerable:!(t=$(n,r))||t.enumerable});return e};var g=(e,n,o)=>(o=e!=null?L(S(e)):{},N(n||!e||!e.__esModule?f(o,"default",{value:e,enumerable:!0}):o,e));var b=require("commander");var a="0.1.0";var m=g(require("fs")),c=g(require("path"));var l="\r",p=`
`,i=["YOUR_FIELD_VALUE"];var R=require("inquirer"),v=(e,n)=>{let[o,t]=e.split("=");return n===i[0]?`${o}="YOUR_${o}_VALUE"`:""},T=(e,n)=>e.split(`${l}${p}`).map(t=>{if(t.trim()===""||t.startsWith("#"))return t;if(t.includes("#")){let[r,s]=t.split(/#+/);return`${v(r,n)}   #${s}`}return`${v(t,n)}`}).join(`${l}${p}`),I=(e,n,o)=>{try{let t=c.default.join(process.cwd(),e!=null?e:".env");console.log(`reading sample env(${e})`);let r=m.default.readFileSync(t,{encoding:"utf8",flag:"r"});return T(r,o)}catch(t){return console.log("No .env file Found!"),!1}},U=(e,n)=>{let o=c.default.join(process.cwd(),n!=null?n:".env");try{m.default.writeFileSync(o,e,{encoding:"utf8",flag:"w"})}catch(t){console.log(`Couldnot write ${n} file.`)}},h=({name:e,sample:n,values:o,dryRun:t})=>{let r=I(e,n,o);r&&(t?console.log(r):U(r,n),!t&&console.log("Sample ENV file written successfully!"))},y=({name:e,sample:n,values:o,silent:t,dryRun:r})=>{t?h({name:e,sample:n,values:o,dryRun:r}):R.prompt([{type:"input",name:"name",message:"What is the name of your env file?",default:".env"},{type:"input",name:"sample",message:"What do you want your sample env file name to be?",default:".sample.env"},{type:"list",name:"values",message:"Placeholder format for your values?",choices:i},{type:"confirm",name:"dryRun",message:"Want the output in the console instead of generating a file?",default:!1}]).then(({name:s,sample:A,values:_,dryRun:C})=>{h({name:s,sample:A,values:_,dryRun:C})}).catch(s=>{s.isTtyError?(console.log("Couldnot render prompt under this environment!"),console.log(s)):console.log(`Something went Wrong: ${s}`)})};var V=require("figlet"),O=`
${V.textSync(`Helper v${a}`,{font:"Standard",horizontalLayout:"fitted",verticalLayout:"fitted"})}
A CLI tool for generating a sample env(.env.sample) file from a .env file.
By: Ajay Singh [@mentormaya] <admin@ajaysingh.com.np>
`,E=O;var u=new b.Command;u.name("helper").description(E).version(a);u.command("gen-env").description("Generate Sample ENV(.env.sample) from .env file.").option("-s, --silent","runs without any interaction.",!1).option("-n, --name <name>","Name of env file",".env").option("-N, --sample <sample_name>","Name for the sample env file",".env.sample").option("-v, --values <placeholder>","Default Placeholder Value",i[0]).option("-d, --dry-run","Output to the console only",!1).action(y);u.parse();
