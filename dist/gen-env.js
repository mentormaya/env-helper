"use strict";var v=Object.create;var i=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var E=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,h=Object.prototype.hasOwnProperty;var $=(n,t)=>{for(var e in t)i(n,e,{get:t[e],enumerable:!0})},u=(n,t,e,o)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of E(t))!h.call(n,r)&&r!==e&&i(n,r,{get:()=>t[r],enumerable:!(o=d(t,r))||o.enumerable});return n};var f=(n,t,e)=>(e=n!=null?v(y(n)):{},u(t||!n||!n.__esModule?i(e,"default",{value:n,enumerable:!0}):e,n)),R=n=>u(i({},"__esModule",{value:!0}),n);var L={};$(L,{genEnv:()=>A});module.exports=R(L);var c=f(require("fs")),g=f(require("path"));var l="\r",a=`
`;var w=require("inquirer"),p=(n,t)=>{let[e,o]=n.split("=");return t==="YOUR_FIELD_VALUE"?`${e}="YOUR_${e}_VALUE"`:""},_=(n,t)=>n.split(`${l}${a}`).map(o=>{if(o.trim()===""||o.startsWith("#"))return o;if(o.includes("#")){let[r,s]=o.split(/#+/);return`${p(r,t)}   #${s}`}return`${p(o,t)}`}).join(`${l}${a}`),N=(n,t,e)=>{try{let o=g.default.join(process.cwd(),n!=null?n:".env");console.log(`reading sample env(${n})`);let r=c.default.readFileSync(o,{encoding:"utf8",flag:"r"});return _(r,e)}catch(o){return console.log("No .env file Found!"),!1}},U=(n,t)=>{let e=g.default.join(process.cwd(),t!=null?t:".env");try{c.default.writeFileSync(e,n,{encoding:"utf8",flag:"w"})}catch(o){console.log(`Couldnot write ${t} file.`)}},m=({name:n,sample:t,values:e,dryRun:o})=>{let r=N(n,t,e);r&&(o?console.log(r):U(r,t),!o&&console.log("Sample ENV file written successfully!"))},A=({name:n,sample:t,values:e,silent:o,dryRun:r})=>{o?m({name:n,sample:t,values:e,dryRun:r}):w.prompt([{type:"input",name:"name",message:"What is the name of your env file?",default:".env"},{type:"input",name:"sample",message:"What do you want your sample env file name to be?",default:".sample.env"},{type:"input",name:"values",message:"Placeholder format for your values?",default:"YOUR_FIELD_VALUE"},{type:"confirm",name:"dryRun",message:"Want the output in the console instead of generating a file?",default:!1}]).then(s=>{m({name:n,sample:t,values:e,dryRun:r})}).catch(s=>{s.isTtyError?(console.log("Couldnot render prompt under this environment!"),console.log(s)):console.log(`Something went Wrong: ${s}`)})};0&&(module.exports={genEnv});
