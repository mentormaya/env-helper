"use strict";var h=Object.create;var i=Object.defineProperty;var _=Object.getOwnPropertyDescriptor;var $=Object.getOwnPropertyNames;var R=Object.getPrototypeOf,A=Object.prototype.hasOwnProperty;var w=(n,e)=>{for(var t in e)i(n,t,{get:e[t],enumerable:!0})},f=(n,e,t,o)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of $(e))!A.call(n,s)&&s!==t&&i(n,s,{get:()=>e[s],enumerable:!(o=_(e,s))||o.enumerable});return n};var p=(n,e,t)=>(t=n!=null?h(R(n)):{},f(e||!n||!n.__esModule?i(t,"default",{value:n,enumerable:!0}):t,n)),C=n=>f(i({},"__esModule",{value:!0}),n);var S={};w(S,{genEnv:()=>I});module.exports=C(S);var g=p(require("fs")),u=p(require("path"));var l="\r",a=`
`,c=["YOUR_FIELD_VALUE"];var L=require("inquirer"),m=(n,e)=>{let[t,o]=n.split("=");return e===c[0]?`${t}="YOUR_${t}_VALUE"`:""},P=(n,e)=>n.split(`${l}${a}`).map(o=>{if(o.trim()===""||o.startsWith("#"))return o;if(o.includes("#")){let[s,r]=o.split(/#+/);return`${m(s,e)}   #${r}`}return`${m(o,e)}`}).join(`${l}${a}`),N=(n,e,t)=>{try{let o=u.default.join(process.cwd(),n!=null?n:".env");console.log(`reading sample env(${n})`);let s=g.default.readFileSync(o,{encoding:"utf8",flag:"r"});return P(s,t)}catch(o){return console.log("No .env file Found!"),!1}},U=(n,e)=>{let t=u.default.join(process.cwd(),e!=null?e:".env");try{g.default.writeFileSync(t,n,{encoding:"utf8",flag:"w"})}catch(o){console.log(`Couldnot write ${e} file.`)}},E=({name:n,sample:e,values:t,dryRun:o})=>{let s=N(n,e,t);s&&(o?console.log(s):U(s,e),!o&&console.log("Sample ENV file written successfully!"))},I=({name:n,sample:e,values:t,silent:o,dryRun:s})=>{o?E({name:n,sample:e,values:t,dryRun:s}):L.prompt([{type:"input",name:"name",message:"What is the name of your env file?",default:".env"},{type:"input",name:"sample",message:"What do you want your sample env file name to be?",default:".sample.env"},{type:"list",name:"values",message:"Placeholder format for your values?",choices:c},{type:"confirm",name:"dryRun",message:"Want the output in the console instead of generating a file?",default:!1}]).then(({name:r,sample:v,values:d,dryRun:y})=>{E({name:r,sample:v,values:d,dryRun:y})}).catch(r=>{r.isTtyError?(console.log("Couldnot render prompt under this environment!"),console.log(r)):console.log(`Something went Wrong: ${r}`)})};0&&(module.exports={genEnv});
